// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	models "github.com/leanix/leanix-k8s-connector/pkg/iris/common/models"
	namespacesmodels "github.com/leanix/leanix-k8s-connector/pkg/iris/namespaces/models"
	mock "github.com/stretchr/testify/mock"
)

// EcstEventBuilder is an autogenerated mock type for the EcstEventBuilder type
type EcstEventBuilder struct {
	mock.Mock
}

type EcstEventBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *EcstEventBuilder) EXPECT() *EcstEventBuilder_Expecter {
	return &EcstEventBuilder_Expecter{mock: &_m.Mock}
}

// Body provides a mock function with given fields: body
func (_m *EcstEventBuilder) Body(body models.DiscoveryBody) namespacesmodels.EcstEventBuilder {
	ret := _m.Called(body)

	var r0 namespacesmodels.EcstEventBuilder
	if rf, ok := ret.Get(0).(func(models.DiscoveryBody) namespacesmodels.EcstEventBuilder); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(namespacesmodels.EcstEventBuilder)
		}
	}

	return r0
}

// EcstEventBuilder_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type EcstEventBuilder_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
//   - body models.DiscoveryBody
func (_e *EcstEventBuilder_Expecter) Body(body interface{}) *EcstEventBuilder_Body_Call {
	return &EcstEventBuilder_Body_Call{Call: _e.mock.On("Body", body)}
}

func (_c *EcstEventBuilder_Body_Call) Run(run func(body models.DiscoveryBody)) *EcstEventBuilder_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.DiscoveryBody))
	})
	return _c
}

func (_c *EcstEventBuilder_Body_Call) Return(_a0 namespacesmodels.EcstEventBuilder) *EcstEventBuilder_Body_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EcstEventBuilder_Body_Call) RunAndReturn(run func(models.DiscoveryBody) namespacesmodels.EcstEventBuilder) *EcstEventBuilder_Body_Call {
	_c.Call.Return(run)
	return _c
}

// Build provides a mock function with given fields:
func (_m *EcstEventBuilder) Build() models.DiscoveryEvent {
	ret := _m.Called()

	var r0 models.DiscoveryEvent
	if rf, ok := ret.Get(0).(func() models.DiscoveryEvent); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.DiscoveryEvent)
	}

	return r0
}

// EcstEventBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type EcstEventBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *EcstEventBuilder_Expecter) Build() *EcstEventBuilder_Build_Call {
	return &EcstEventBuilder_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *EcstEventBuilder_Build_Call) Run(run func()) *EcstEventBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EcstEventBuilder_Build_Call) Return(_a0 models.DiscoveryEvent) *EcstEventBuilder_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EcstEventBuilder_Build_Call) RunAndReturn(run func() models.DiscoveryEvent) *EcstEventBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: header
func (_m *EcstEventBuilder) Header(header models.HeaderProperties) namespacesmodels.EcstEventBuilder {
	ret := _m.Called(header)

	var r0 namespacesmodels.EcstEventBuilder
	if rf, ok := ret.Get(0).(func(models.HeaderProperties) namespacesmodels.EcstEventBuilder); ok {
		r0 = rf(header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(namespacesmodels.EcstEventBuilder)
		}
	}

	return r0
}

// EcstEventBuilder_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type EcstEventBuilder_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - header models.HeaderProperties
func (_e *EcstEventBuilder_Expecter) Header(header interface{}) *EcstEventBuilder_Header_Call {
	return &EcstEventBuilder_Header_Call{Call: _e.mock.On("Header", header)}
}

func (_c *EcstEventBuilder_Header_Call) Run(run func(header models.HeaderProperties)) *EcstEventBuilder_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.HeaderProperties))
	})
	return _c
}

func (_c *EcstEventBuilder_Header_Call) Return(_a0 namespacesmodels.EcstEventBuilder) *EcstEventBuilder_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EcstEventBuilder_Header_Call) RunAndReturn(run func(models.HeaderProperties) namespacesmodels.EcstEventBuilder) *EcstEventBuilder_Header_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewEcstEventBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewEcstEventBuilder creates a new instance of EcstEventBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEcstEventBuilder(t mockConstructorTestingTNewEcstEventBuilder) *EcstEventBuilder {
	mock := &EcstEventBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
