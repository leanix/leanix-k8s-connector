// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	commonmodels "github.com/leanix/leanix-k8s-connector/pkg/iris/common/models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/leanix/leanix-k8s-connector/pkg/iris/workloads/models"
)

// WorkloadEventProducer is an autogenerated mock type for the WorkloadEventProducer type
type WorkloadEventProducer struct {
	mock.Mock
}

type WorkloadEventProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkloadEventProducer) EXPECT() *WorkloadEventProducer_Expecter {
	return &WorkloadEventProducer_Expecter{mock: &_m.Mock}
}

// FilterForChangedItems provides a mock function with given fields: newData, oldData, configId
func (_m *WorkloadEventProducer) FilterForChangedItems(newData map[string]models.Data, oldData map[string]commonmodels.DiscoveryEvent, configId string) ([]commonmodels.DiscoveryEvent, []commonmodels.DiscoveryEvent, map[string]commonmodels.DiscoveryEvent, error) {
	ret := _m.Called(newData, oldData, configId)

	var r0 []commonmodels.DiscoveryEvent
	var r1 []commonmodels.DiscoveryEvent
	var r2 map[string]commonmodels.DiscoveryEvent
	var r3 error
	if rf, ok := ret.Get(0).(func(map[string]models.Data, map[string]commonmodels.DiscoveryEvent, string) ([]commonmodels.DiscoveryEvent, []commonmodels.DiscoveryEvent, map[string]commonmodels.DiscoveryEvent, error)); ok {
		return rf(newData, oldData, configId)
	}
	if rf, ok := ret.Get(0).(func(map[string]models.Data, map[string]commonmodels.DiscoveryEvent, string) []commonmodels.DiscoveryEvent); ok {
		r0 = rf(newData, oldData, configId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commonmodels.DiscoveryEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]models.Data, map[string]commonmodels.DiscoveryEvent, string) []commonmodels.DiscoveryEvent); ok {
		r1 = rf(newData, oldData, configId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]commonmodels.DiscoveryEvent)
		}
	}

	if rf, ok := ret.Get(2).(func(map[string]models.Data, map[string]commonmodels.DiscoveryEvent, string) map[string]commonmodels.DiscoveryEvent); ok {
		r2 = rf(newData, oldData, configId)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(map[string]commonmodels.DiscoveryEvent)
		}
	}

	if rf, ok := ret.Get(3).(func(map[string]models.Data, map[string]commonmodels.DiscoveryEvent, string) error); ok {
		r3 = rf(newData, oldData, configId)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// WorkloadEventProducer_FilterForChangedItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterForChangedItems'
type WorkloadEventProducer_FilterForChangedItems_Call struct {
	*mock.Call
}

// FilterForChangedItems is a helper method to define mock.On call
//   - newData map[string]models.Data
//   - oldData map[string]commonmodels.DiscoveryEvent
//   - configId string
func (_e *WorkloadEventProducer_Expecter) FilterForChangedItems(newData interface{}, oldData interface{}, configId interface{}) *WorkloadEventProducer_FilterForChangedItems_Call {
	return &WorkloadEventProducer_FilterForChangedItems_Call{Call: _e.mock.On("FilterForChangedItems", newData, oldData, configId)}
}

func (_c *WorkloadEventProducer_FilterForChangedItems_Call) Run(run func(newData map[string]models.Data, oldData map[string]commonmodels.DiscoveryEvent, configId string)) *WorkloadEventProducer_FilterForChangedItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]models.Data), args[1].(map[string]commonmodels.DiscoveryEvent), args[2].(string))
	})
	return _c
}

func (_c *WorkloadEventProducer_FilterForChangedItems_Call) Return(_a0 []commonmodels.DiscoveryEvent, _a1 []commonmodels.DiscoveryEvent, _a2 map[string]commonmodels.DiscoveryEvent, _a3 error) *WorkloadEventProducer_FilterForChangedItems_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *WorkloadEventProducer_FilterForChangedItems_Call) RunAndReturn(run func(map[string]models.Data, map[string]commonmodels.DiscoveryEvent, string) ([]commonmodels.DiscoveryEvent, []commonmodels.DiscoveryEvent, map[string]commonmodels.DiscoveryEvent, error)) *WorkloadEventProducer_FilterForChangedItems_Call {
	_c.Call.Return(run)
	return _c
}

// PostStatus provides a mock function with given fields: status
func (_m *WorkloadEventProducer) PostStatus(status []byte) error {
	ret := _m.Called(status)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkloadEventProducer_PostStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostStatus'
type WorkloadEventProducer_PostStatus_Call struct {
	*mock.Call
}

// PostStatus is a helper method to define mock.On call
//   - status []byte
func (_e *WorkloadEventProducer_Expecter) PostStatus(status interface{}) *WorkloadEventProducer_PostStatus_Call {
	return &WorkloadEventProducer_PostStatus_Call{Call: _e.mock.On("PostStatus", status)}
}

func (_c *WorkloadEventProducer_PostStatus_Call) Run(run func(status []byte)) *WorkloadEventProducer_PostStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *WorkloadEventProducer_PostStatus_Call) Return(_a0 error) *WorkloadEventProducer_PostStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkloadEventProducer_PostStatus_Call) RunAndReturn(run func([]byte) error) *WorkloadEventProducer_PostStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessWorkloads provides a mock function with given fields: data, oldData, configId
func (_m *WorkloadEventProducer) ProcessWorkloads(data []models.Data, oldData []commonmodels.DiscoveryEvent, configId string) error {
	ret := _m.Called(data, oldData, configId)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Data, []commonmodels.DiscoveryEvent, string) error); ok {
		r0 = rf(data, oldData, configId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkloadEventProducer_ProcessWorkloads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessWorkloads'
type WorkloadEventProducer_ProcessWorkloads_Call struct {
	*mock.Call
}

// ProcessWorkloads is a helper method to define mock.On call
//   - data []models.Data
//   - oldData []commonmodels.DiscoveryEvent
//   - configId string
func (_e *WorkloadEventProducer_Expecter) ProcessWorkloads(data interface{}, oldData interface{}, configId interface{}) *WorkloadEventProducer_ProcessWorkloads_Call {
	return &WorkloadEventProducer_ProcessWorkloads_Call{Call: _e.mock.On("ProcessWorkloads", data, oldData, configId)}
}

func (_c *WorkloadEventProducer_ProcessWorkloads_Call) Run(run func(data []models.Data, oldData []commonmodels.DiscoveryEvent, configId string)) *WorkloadEventProducer_ProcessWorkloads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.Data), args[1].([]commonmodels.DiscoveryEvent), args[2].(string))
	})
	return _c
}

func (_c *WorkloadEventProducer_ProcessWorkloads_Call) Return(_a0 error) *WorkloadEventProducer_ProcessWorkloads_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkloadEventProducer_ProcessWorkloads_Call) RunAndReturn(run func([]models.Data, []commonmodels.DiscoveryEvent, string) error) *WorkloadEventProducer_ProcessWorkloads_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewWorkloadEventProducer interface {
	mock.TestingT
	Cleanup(func())
}

// NewWorkloadEventProducer creates a new instance of WorkloadEventProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWorkloadEventProducer(t mockConstructorTestingTNewWorkloadEventProducer) *WorkloadEventProducer {
	mock := &WorkloadEventProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
