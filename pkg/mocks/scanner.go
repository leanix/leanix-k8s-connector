// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	kubernetes "github.com/leanix/leanix-k8s-connector/pkg/kubernetes"
	mock "github.com/stretchr/testify/mock"

	rest "k8s.io/client-go/rest"
)

// Scanner is an autogenerated mock type for the Scanner type
type Scanner struct {
	mock.Mock
}

type Scanner_Expecter struct {
	mock *mock.Mock
}

func (_m *Scanner) EXPECT() *Scanner_Expecter {
	return &Scanner_Expecter{mock: &_m.Mock}
}

// Scan provides a mock function with given fields: getKubernetesApiFunc, config, configurationName
func (_m *Scanner) Scan(getKubernetesApiFunc kubernetes.GetKubernetesAPI, config *rest.Config, configurationName string) error {
	ret := _m.Called(getKubernetesApiFunc, config, configurationName)

	var r0 error
	if rf, ok := ret.Get(0).(func(kubernetes.GetKubernetesAPI, *rest.Config, string) error); ok {
		r0 = rf(getKubernetesApiFunc, config, configurationName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scanner_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type Scanner_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - getKubernetesApiFunc kubernetes.GetKubernetesAPI
//   - config *rest.Config
//   - configurationName string
func (_e *Scanner_Expecter) Scan(getKubernetesApiFunc interface{}, config interface{}, configurationName interface{}) *Scanner_Scan_Call {
	return &Scanner_Scan_Call{Call: _e.mock.On("Scan", getKubernetesApiFunc, config, configurationName)}
}

func (_c *Scanner_Scan_Call) Run(run func(getKubernetesApiFunc kubernetes.GetKubernetesAPI, config *rest.Config, configurationName string)) *Scanner_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kubernetes.GetKubernetesAPI), args[1].(*rest.Config), args[2].(string))
	})
	return _c
}

func (_c *Scanner_Scan_Call) Return(_a0 error) *Scanner_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scanner_Scan_Call) RunAndReturn(run func(kubernetes.GetKubernetesAPI, *rest.Config, string) error) *Scanner_Scan_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewScanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewScanner creates a new instance of Scanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScanner(t mockConstructorTestingTNewScanner) *Scanner {
	mock := &Scanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
