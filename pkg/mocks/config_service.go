// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	models "github.com/leanix/leanix-k8s-connector/pkg/iris/common/models"
	mock "github.com/stretchr/testify/mock"
)

// ConfigService is an autogenerated mock type for the ConfigService type
type ConfigService struct {
	mock.Mock
}

type ConfigService_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfigService) EXPECT() *ConfigService_Expecter {
	return &ConfigService_Expecter{mock: &_m.Mock}
}

// GetConfiguration provides a mock function with given fields: configurationName
func (_m *ConfigService) GetConfiguration(configurationName string) ([]byte, error) {
	ret := _m.Called(configurationName)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(configurationName)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(configurationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(configurationName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigService_GetConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfiguration'
type ConfigService_GetConfiguration_Call struct {
	*mock.Call
}

// GetConfiguration is a helper method to define mock.On call
//   - configurationName string
func (_e *ConfigService_Expecter) GetConfiguration(configurationName interface{}) *ConfigService_GetConfiguration_Call {
	return &ConfigService_GetConfiguration_Call{Call: _e.mock.On("GetConfiguration", configurationName)}
}

func (_c *ConfigService_GetConfiguration_Call) Run(run func(configurationName string)) *ConfigService_GetConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConfigService_GetConfiguration_Call) Return(_a0 []byte, _a1 error) *ConfigService_GetConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigService_GetConfiguration_Call) RunAndReturn(run func(string) ([]byte, error)) *ConfigService_GetConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetScanResults provides a mock function with given fields: configurationId
func (_m *ConfigService) GetScanResults(configurationId string) ([]models.DiscoveryEvent, error) {
	ret := _m.Called(configurationId)

	var r0 []models.DiscoveryEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.DiscoveryEvent, error)); ok {
		return rf(configurationId)
	}
	if rf, ok := ret.Get(0).(func(string) []models.DiscoveryEvent); ok {
		r0 = rf(configurationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DiscoveryEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(configurationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigService_GetScanResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScanResults'
type ConfigService_GetScanResults_Call struct {
	*mock.Call
}

// GetScanResults is a helper method to define mock.On call
//   - configurationId string
func (_e *ConfigService_Expecter) GetScanResults(configurationId interface{}) *ConfigService_GetScanResults_Call {
	return &ConfigService_GetScanResults_Call{Call: _e.mock.On("GetScanResults", configurationId)}
}

func (_c *ConfigService_GetScanResults_Call) Run(run func(configurationId string)) *ConfigService_GetScanResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConfigService_GetScanResults_Call) Return(_a0 []models.DiscoveryEvent, _a1 error) *ConfigService_GetScanResults_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigService_GetScanResults_Call) RunAndReturn(run func(string) ([]models.DiscoveryEvent, error)) *ConfigService_GetScanResults_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewConfigService interface {
	mock.TestingT
	Cleanup(func())
}

// NewConfigService creates a new instance of ConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConfigService(t mockConstructorTestingTNewConfigService) *ConfigService {
	mock := &ConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
