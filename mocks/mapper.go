// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	mapper "github.com/leanix/leanix-k8s-connector/pkg/iris/namespaces/services/mapper"
	mock "github.com/stretchr/testify/mock"
	appsv1 "k8s.io/api/apps/v1"

	models "github.com/leanix/leanix-k8s-connector/pkg/iris/namespaces/models"

	v1 "k8s.io/api/core/v1"
)

// Mapper is an autogenerated mock type for the Mapper type
type Mapper struct {
	mock.Mock
}

type Mapper_Expecter struct {
	mock *mock.Mock
}

func (_m *Mapper) EXPECT() *Mapper_Expecter {
	return &Mapper_Expecter{mock: &_m.Mock}
}

// MapCluster provides a mock function with given fields: clusterName, nodes
func (_m *Mapper) MapCluster(clusterName string, nodes *v1.NodeList) (mapper.ClusterDTO, error) {
	ret := _m.Called(clusterName, nodes)

	var r0 mapper.ClusterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *v1.NodeList) (mapper.ClusterDTO, error)); ok {
		return rf(clusterName, nodes)
	}
	if rf, ok := ret.Get(0).(func(string, *v1.NodeList) mapper.ClusterDTO); ok {
		r0 = rf(clusterName, nodes)
	} else {
		r0 = ret.Get(0).(mapper.ClusterDTO)
	}

	if rf, ok := ret.Get(1).(func(string, *v1.NodeList) error); ok {
		r1 = rf(clusterName, nodes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mapper_MapCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapCluster'
type Mapper_MapCluster_Call struct {
	*mock.Call
}

// MapCluster is a helper method to define mock.On call
//   - clusterName string
//   - nodes *v1.NodeList
func (_e *Mapper_Expecter) MapCluster(clusterName interface{}, nodes interface{}) *Mapper_MapCluster_Call {
	return &Mapper_MapCluster_Call{Call: _e.mock.On("MapCluster", clusterName, nodes)}
}

func (_c *Mapper_MapCluster_Call) Run(run func(clusterName string, nodes *v1.NodeList)) *Mapper_MapCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*v1.NodeList))
	})
	return _c
}

func (_c *Mapper_MapCluster_Call) Return(_a0 mapper.ClusterDTO, _a1 error) *Mapper_MapCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mapper_MapCluster_Call) RunAndReturn(run func(string, *v1.NodeList) (mapper.ClusterDTO, error)) *Mapper_MapCluster_Call {
	_c.Call.Return(run)
	return _c
}

// MapDeploymentsEcst provides a mock function with given fields: deployments, services
func (_m *Mapper) MapDeploymentsEcst(deployments *appsv1.DeploymentList, services *v1.ServiceList) ([]models.DeploymentEcst, error) {
	ret := _m.Called(deployments, services)

	var r0 []models.DeploymentEcst
	var r1 error
	if rf, ok := ret.Get(0).(func(*appsv1.DeploymentList, *v1.ServiceList) ([]models.DeploymentEcst, error)); ok {
		return rf(deployments, services)
	}
	if rf, ok := ret.Get(0).(func(*appsv1.DeploymentList, *v1.ServiceList) []models.DeploymentEcst); ok {
		r0 = rf(deployments, services)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeploymentEcst)
		}
	}

	if rf, ok := ret.Get(1).(func(*appsv1.DeploymentList, *v1.ServiceList) error); ok {
		r1 = rf(deployments, services)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mapper_MapDeploymentsEcst_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapDeploymentsEcst'
type Mapper_MapDeploymentsEcst_Call struct {
	*mock.Call
}

// MapDeploymentsEcst is a helper method to define mock.On call
//   - deployments *appsv1.DeploymentList
//   - services *v1.ServiceList
func (_e *Mapper_Expecter) MapDeploymentsEcst(deployments interface{}, services interface{}) *Mapper_MapDeploymentsEcst_Call {
	return &Mapper_MapDeploymentsEcst_Call{Call: _e.mock.On("MapDeploymentsEcst", deployments, services)}
}

func (_c *Mapper_MapDeploymentsEcst_Call) Run(run func(deployments *appsv1.DeploymentList, services *v1.ServiceList)) *Mapper_MapDeploymentsEcst_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*appsv1.DeploymentList), args[1].(*v1.ServiceList))
	})
	return _c
}

func (_c *Mapper_MapDeploymentsEcst_Call) Return(_a0 []models.DeploymentEcst, _a1 error) *Mapper_MapDeploymentsEcst_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mapper_MapDeploymentsEcst_Call) RunAndReturn(run func(*appsv1.DeploymentList, *v1.ServiceList) ([]models.DeploymentEcst, error)) *Mapper_MapDeploymentsEcst_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMapper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMapper creates a new instance of Mapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMapper(t mockConstructorTestingTNewMapper) *Mapper {
	mock := &Mapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
