// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	kubernetes "github.com/leanix/leanix-k8s-connector/pkg/kubernetes"

	mock "github.com/stretchr/testify/mock"

	models "github.com/leanix/leanix-k8s-connector/pkg/iris/workloads/models"
)

// MapperWorkload is an autogenerated mock type for the MapperWorkload type
type MapperWorkload struct {
	mock.Mock
}

type MapperWorkload_Expecter struct {
	mock *mock.Mock
}

func (_m *MapperWorkload) EXPECT() *MapperWorkload_Expecter {
	return &MapperWorkload_Expecter{mock: &_m.Mock}
}

// MapWorkloads provides a mock function with given fields: k8sApi, clusterName
func (_m *MapperWorkload) MapWorkloads(k8sApi *kubernetes.API, clusterName string) ([]models.Workload, error) {
	ret := _m.Called(k8sApi, clusterName)

	var r0 []models.Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(*kubernetes.API, string) ([]models.Workload, error)); ok {
		return rf(k8sApi, clusterName)
	}
	if rf, ok := ret.Get(0).(func(*kubernetes.API, string) []models.Workload); ok {
		r0 = rf(k8sApi, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(*kubernetes.API, string) error); ok {
		r1 = rf(k8sApi, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MapperWorkload_MapWorkloads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapWorkloads'
type MapperWorkload_MapWorkloads_Call struct {
	*mock.Call
}

// MapWorkloads is a helper method to define mock.On call
//   - k8sApi *kubernetes.API
//   - clusterName string
func (_e *MapperWorkload_Expecter) MapWorkloads(k8sApi interface{}, clusterName interface{}) *MapperWorkload_MapWorkloads_Call {
	return &MapperWorkload_MapWorkloads_Call{Call: _e.mock.On("MapWorkloads", k8sApi, clusterName)}
}

func (_c *MapperWorkload_MapWorkloads_Call) Run(run func(k8sApi *kubernetes.API, clusterName string)) *MapperWorkload_MapWorkloads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*kubernetes.API), args[1].(string))
	})
	return _c
}

func (_c *MapperWorkload_MapWorkloads_Call) Return(_a0 []models.Workload, _a1 error) *MapperWorkload_MapWorkloads_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MapperWorkload_MapWorkloads_Call) RunAndReturn(run func(*kubernetes.API, string) ([]models.Workload, error)) *MapperWorkload_MapWorkloads_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMapperWorkload interface {
	mock.TestingT
	Cleanup(func())
}

// NewMapperWorkload creates a new instance of MapperWorkload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMapperWorkload(t mockConstructorTestingTNewMapperWorkload) *MapperWorkload {
	mock := &MapperWorkload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
