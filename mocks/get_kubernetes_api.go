// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	kubernetes "github.com/leanix/leanix-k8s-connector/pkg/kubernetes"
	mock "github.com/stretchr/testify/mock"

	rest "k8s.io/client-go/rest"
)

// GetKubernetesAPI is an autogenerated mock type for the GetKubernetesAPI type
type GetKubernetesAPI struct {
	mock.Mock
}

type GetKubernetesAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *GetKubernetesAPI) EXPECT() *GetKubernetesAPI_Expecter {
	return &GetKubernetesAPI_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: config
func (_m *GetKubernetesAPI) Execute(config *rest.Config) (*kubernetes.API, error) {
	ret := _m.Called(config)

	var r0 *kubernetes.API
	var r1 error
	if rf, ok := ret.Get(0).(func(*rest.Config) (*kubernetes.API, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*rest.Config) *kubernetes.API); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.API)
		}
	}

	if rf, ok := ret.Get(1).(func(*rest.Config) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKubernetesAPI_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type GetKubernetesAPI_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - config *rest.Config
func (_e *GetKubernetesAPI_Expecter) Execute(config interface{}) *GetKubernetesAPI_Execute_Call {
	return &GetKubernetesAPI_Execute_Call{Call: _e.mock.On("Execute", config)}
}

func (_c *GetKubernetesAPI_Execute_Call) Run(run func(config *rest.Config)) *GetKubernetesAPI_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*rest.Config))
	})
	return _c
}

func (_c *GetKubernetesAPI_Execute_Call) Return(_a0 *kubernetes.API, _a1 error) *GetKubernetesAPI_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetKubernetesAPI_Execute_Call) RunAndReturn(run func(*rest.Config) (*kubernetes.API, error)) *GetKubernetesAPI_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGetKubernetesAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetKubernetesAPI creates a new instance of GetKubernetesAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetKubernetesAPI(t mockConstructorTestingTNewGetKubernetesAPI) *GetKubernetesAPI {
	mock := &GetKubernetesAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
