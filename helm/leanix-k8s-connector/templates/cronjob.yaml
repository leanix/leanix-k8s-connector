apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ include "leanix-k8s-connector.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "leanix-k8s-connector.labels" . | indent 4 }}
spec:
  schedule: "{{ include "leanix-k8s-connector.integrationApiSchedule" . }}"
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 200
  jobTemplate:
    spec:
      template:
        spec:
          {{- if .Values.rbac }}
          serviceAccountName: leanix-k8s-connector
          {{- end }}
          containers:
          - name: connector
            securityContext:
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: {{ .Values.securityContext.userId | default 65534 }}
              runAsGroup: {{ .Values.securityContext.groupId | default 65534 }}
              allowPrivilegeEscalation: false
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            env:
            - name: LX_WORKSPACE
              value: "{{ .Values.args.lxWorkspace }}"
            {{- if .Values.args.verbose }}
            - name: VERBOSE
              value: "true"
            {{- end }}
            - name: ENABLE_CUSTOM_STORAGE
              value: "{{ .Values.args.enableCustomStorage }}"
            {{- if .Values.args.enableCustomStorage }}
            - name: STORAGE_BACKEND
              value: "{{ .Values.args.storageBackend }}"
            {{- end }}
            {{- if eq .Values.args.storageBackend "file" }}
            - name: LOCAL_FILE_PATH
              value: "{{ .Values.args.file.localFilePath }}"
            {{- else if eq .Values.args.storageBackend "azureblob" }}
            - name: AZURE_ACCOUNT_NAME
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.args.azureblob.secretName }}"
                  key: azurestorageaccountname
            - name: AZURE_ACCOUNT_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.args.azureblob.secretName }}"
                  key: azurestorageaccountkey
            - name: AZURE_CONTAINER
              value: "{{ .Values.args.azureblob.container }}"
            {{- end }}
            - name: BLACKLIST_NAMESPACES
              value: "{{ .Values.args.blacklistNamespaces | join ", " }}"
            - name: INTEGRATION_API_DATASOURCENAME
              value: "{{ .Values.integrationApi.datasourceName }}"
            - name: INTEGRATION_API_FQDN
              value: "{{ .Values.integrationApi.fqdn }}"
            - name: INTEGRATION_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.integrationApi.secretName }}"
                  key: token
            {{- range $key, $val := .Values.args.additionalEnv }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
            resources:
              requests:
                cpu: {{ .Values.resources.requests.cpu }}
                memory: {{ .Values.resources.requests.memory }}
              limits:
                cpu: {{ .Values.resources.limits.cpu }}
                memory: {{ .Values.resources.limits.memory }}
          {{- if eq .Values.args.storageBackend "file" }}
            volumeMounts:
            - mountPath: "{{ .Values.args.file.localFilePath }}"
              name: volume
          volumes:
            - name: volume
              persistentVolumeClaim:
                claimName: "{{ .Values.args.file.claimName }}"
          {{- end }}
          restartPolicy: OnFailure
